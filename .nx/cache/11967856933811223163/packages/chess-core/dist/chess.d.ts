import { BoardSquare, GameOutcome, GameState, Move, Piece, PieceColour, PieceRecord, Position } from "./chess.types";
export declare const copyGameState: (gameState: GameState) => GameState;
export declare const getBoardSquare: (gameState: GameState, position: Position) => BoardSquare;
export declare const findPiece: (gameState: GameState, piece: Piece) => Position[];
export declare const getPieceRecord: (gameState: GameState) => PieceRecord;
export declare const changeTurn: (gameState: GameState) => GameState;
export declare const getAttackZone: (gameState: GameState, position: Position) => Position[];
export declare const getAttackZones: (gameState: GameState, colour: PieceColour) => Position[];
export declare const isKingInCheck: (gameState: GameState, colour: PieceColour) => boolean;
export declare const makeMove: (gameState: GameState, move: Move) => GameState;
export declare const movePiece: (gameState: GameState, from: Position, to: Position, promotionType?: Piece) => GameState;
export declare const castle: (gameState: GameState, move: Move) => GameState;
export declare const addMoveToHistory: (gameState: GameState, move: Move) => GameState;
export declare const doesMoveCheckOwnKing: (gameState: GameState, move: Move) => boolean;
export declare const getPotentialLegalMoves: (gameState: GameState, position: Position) => Move[];
export declare const getAllPotentialLegalMoves: (gameState: GameState, colour: PieceColour) => Move[];
export declare const isKingInCheckmate: (gameState: GameState, colour: PieceColour) => boolean;
export declare const colourHasInsiffucientMaterial: (record: PieceRecord, colour: PieceColour) => boolean;
export declare const insufficentMaterial: (gameState: GameState) => boolean;
export declare const getGameOutcome: (gameState: GameState) => GameOutcome | null;
//# sourceMappingURL=chess.d.ts.map