"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFiles = createFiles;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const ts_solution_setup_1 = require("@nx/js/src/utils/typescript/ts-solution-setup");
function createFiles(tree, options, presetExt) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const filesFolder = options.setupFile === 'angular' ? '../files-angular' : '../files';
    let transformer;
    let transformerOptions = null;
    if (options.compiler === 'babel' || options.babelJest) {
        transformer = 'babel-jest';
    }
    else if (options.compiler === 'swc') {
        transformer = '@swc/jest';
        if (options.supportTsx) {
            transformerOptions =
                "{ jsc: { parser: { syntax: 'typescript', tsx: true }, transform: { react: { runtime: 'automatic' } } } }";
        }
    }
    else {
        transformer = 'ts-jest';
        transformerOptions = "{ tsconfig: '<rootDir>/tsconfig.spec.json' }";
    }
    const isTsSolutionSetup = (0, ts_solution_setup_1.isUsingTsSolutionSetup)(tree);
    const projectRoot = options.rootProject
        ? options.project
        : projectConfig.root;
    const rootOffset = (0, devkit_1.offsetFromRoot)(projectConfig.root);
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(__dirname, filesFolder), projectConfig.root, {
        tmpl: '',
        ...options,
        // jsdom is the default
        testEnvironment: options.testEnvironment === 'none' || options.testEnvironment === 'jsdom'
            ? ''
            : options.testEnvironment,
        transformer,
        transformerOptions,
        js: !!options.js,
        rootProject: options.rootProject,
        projectRoot,
        offsetFromRoot: rootOffset,
        presetExt,
        coverageDirectory: isTsSolutionSetup
            ? `test-output/jest/coverage`
            : `${rootOffset}coverage/${projectRoot}`,
        extendedConfig: isTsSolutionSetup
            ? `${rootOffset}tsconfig.base.json`
            : './tsconfig.json',
        outDir: isTsSolutionSetup ? `./out-tsc/jest` : `${rootOffset}dist/out-tsc`,
        module: !isTsSolutionSetup ? 'commonjs' : undefined,
    });
    if (options.setupFile === 'none') {
        tree.delete((0, path_1.join)(projectConfig.root, './src/test-setup.ts'));
    }
    if (options.js) {
        tree.rename((0, path_1.join)(projectConfig.root, 'jest.config.ts'), (0, path_1.join)(projectConfig.root, 'jest.config.js'));
    }
}
